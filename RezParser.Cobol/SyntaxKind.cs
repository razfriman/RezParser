// Decompiled with JetBrains decompiler
// Type: Microsoft.CodeAnalysis.CSharp.SyntaxKind
// Assembly: Microsoft.CodeAnalysis.CSharp, Version=3.8.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// MVID: 6FADCA6F-7ADB-42D2-8770-7270EDB9B1B6
// Assembly location: C:\Users\Raz\.nuget\packages\microsoft.codeanalysis.csharp\3.8.0\lib\netcoreapp3.1\Microsoft.CodeAnalysis.CSharp.dll

namespace RezParser.Cobol
{
  public enum SyntaxKind : ushort
  {
    None = 0,
    List = 1,
    /// <summary>Represents <c>~</c> token.</summary>
    TildeToken = 8193, // 0x2001
    /// <summary>Represents <c>!</c> token.</summary>
    ExclamationToken = 8194, // 0x2002
    /// <summary>Represents <c>$</c> token.</summary>
    /// <remarks>This is a debugger special punctuation and not related to string interpolation.</remarks>
    DollarToken = 8195, // 0x2003
    /// <summary>Represents <c>%</c> token.</summary>
    PercentToken = 8196, // 0x2004
    /// <summary>Represents <c>^</c> token.</summary>
    CaretToken = 8197, // 0x2005
    /// <summary>Represents <c>&amp;</c> token.</summary>
    AmpersandToken = 8198, // 0x2006
    /// <summary>Represents <c>*</c> token.</summary>
    AsteriskToken = 8199, // 0x2007
    /// <summary>Represents <c>(</c> token.</summary>
    OpenParenToken = 8200, // 0x2008
    /// <summary>Represents <c>)</c> token.</summary>
    CloseParenToken = 8201, // 0x2009
    /// <summary>Represents <c>-</c> token.</summary>
    MinusToken = 8202, // 0x200A
    /// <summary>Represents <c>+</c> token.</summary>
    PlusToken = 8203, // 0x200B
    /// <summary>Represents <c>=</c> token.</summary>
    EqualsToken = 8204, // 0x200C
    /// <summary>Represents <c>{</c> token.</summary>
    OpenBraceToken = 8205, // 0x200D
    /// <summary>Represents <c>}</c> token.</summary>
    CloseBraceToken = 8206, // 0x200E
    /// <summary>Represents <c>[</c> token.</summary>
    OpenBracketToken = 8207, // 0x200F
    /// <summary>Represents <c>]</c> token.</summary>
    CloseBracketToken = 8208, // 0x2010
    /// <summary>Represents <c>|</c> token.</summary>
    BarToken = 8209, // 0x2011
    /// <summary>Represents <c>\</c> token.</summary>
    BackslashToken = 8210, // 0x2012
    /// <summary>Represents <c>:</c> token.</summary>
    ColonToken = 8211, // 0x2013
    /// <summary>Represents <c>;</c> token.</summary>
    SemicolonToken = 8212, // 0x2014
    /// <summary>Represents <c>"</c> token.</summary>
    DoubleQuoteToken = 8213, // 0x2015
    /// <summary>Represents <c>'</c> token.</summary>
    SingleQuoteToken = 8214, // 0x2016
    /// <summary>Represents <c>&lt;</c> token.</summary>
    LessThanToken = 8215, // 0x2017
    /// <summary>Represents <c>,</c> token.</summary>
    CommaToken = 8216, // 0x2018
    /// <summary>Represents <c>&gt;</c> token.</summary>
    GreaterThanToken = 8217, // 0x2019
    /// <summary>Represents <c>.</c> token.</summary>
    DotToken = 8218, // 0x201A
    /// <summary>Represents <c>?</c> token.</summary>
    QuestionToken = 8219, // 0x201B
    /// <summary>Represents <c>#</c> token.</summary>
    HashToken = 8220, // 0x201C
    /// <summary>Represents <c>/</c> token.</summary>
    SlashToken = 8221, // 0x201D
    /// <summary>Represents <c>..</c> token.</summary>
    DotDotToken = 8222, // 0x201E
    /// <summary>Represents <c>/&gt;</c> token.</summary>
    SlashGreaterThanToken = 8232, // 0x2028
    /// <summary>Represents <c>&lt;/</c> token.</summary>
    LessThanSlashToken = 8233, // 0x2029
    /// <summary>Represents <c>&lt;!--</c> token.</summary>
    XmlCommentStartToken = 8234, // 0x202A
    /// <summary>Represents <c>--&gt;</c> token.</summary>
    XmlCommentEndToken = 8235, // 0x202B
    /// <summary>Represents <c>&lt;![CDATA[</c> token.</summary>
    XmlCDataStartToken = 8236, // 0x202C
    /// <summary>Represents <c>]]&gt;</c> token.</summary>
    XmlCDataEndToken = 8237, // 0x202D
    /// <summary>Represents <c>&lt;?</c> token.</summary>
    XmlProcessingInstructionStartToken = 8238, // 0x202E
    /// <summary>Represents <c>?&gt;</c> token.</summary>
    XmlProcessingInstructionEndToken = 8239, // 0x202F
    /// <summary>Represents <c>||</c> token.</summary>
    BarBarToken = 8260, // 0x2044
    /// <summary>Represents <c>&amp;&amp;</c> token.</summary>
    AmpersandAmpersandToken = 8261, // 0x2045
    /// <summary>Represents <c>--</c> token.</summary>
    MinusMinusToken = 8262, // 0x2046
    /// <summary>Represents <c>++</c> token.</summary>
    PlusPlusToken = 8263, // 0x2047
    /// <summary>Represents <c>::</c> token.</summary>
    ColonColonToken = 8264, // 0x2048
    /// <summary>Represents <c>??</c> token.</summary>
    QuestionQuestionToken = 8265, // 0x2049
    /// <summary>Represents <c>-&gt;</c> token.</summary>
    MinusGreaterThanToken = 8266, // 0x204A
    /// <summary>Represents <c>!=</c> token.</summary>
    ExclamationEqualsToken = 8267, // 0x204B
    /// <summary>Represents <c>==</c> token.</summary>
    EqualsEqualsToken = 8268, // 0x204C
    /// <summary>Represents <c>=&gt;</c> token.</summary>
    EqualsGreaterThanToken = 8269, // 0x204D
    /// <summary>Represents <c>&lt;=</c> token.</summary>
    LessThanEqualsToken = 8270, // 0x204E
    /// <summary>Represents <c>&lt;&lt;</c> token.</summary>
    LessThanLessThanToken = 8271, // 0x204F
    /// <summary>Represents <c>&lt;&lt;=</c> token.</summary>
    LessThanLessThanEqualsToken = 8272, // 0x2050
    /// <summary>Represents <c>&gt;=</c> token.</summary>
    GreaterThanEqualsToken = 8273, // 0x2051
    /// <summary>Represents <c>&gt;&gt;</c> token.</summary>
    GreaterThanGreaterThanToken = 8274, // 0x2052
    /// <summary>Represents <c>&gt;&gt;=</c> token.</summary>
    GreaterThanGreaterThanEqualsToken = 8275, // 0x2053
    /// <summary>Represents <c>/=</c> token.</summary>
    SlashEqualsToken = 8276, // 0x2054
    /// <summary>Represents <c>*=</c> token.</summary>
    AsteriskEqualsToken = 8277, // 0x2055
    /// <summary>Represents <c>|=</c> token.</summary>
    BarEqualsToken = 8278, // 0x2056
    /// <summary>Represents <c>&amp;=</c> token.</summary>
    AmpersandEqualsToken = 8279, // 0x2057
    /// <summary>Represents <c>+=</c> token.</summary>
    PlusEqualsToken = 8280, // 0x2058
    /// <summary>Represents <c>-=</c> token.</summary>
    MinusEqualsToken = 8281, // 0x2059
    /// <summary>Represents <c>^=</c> token.</summary>
    CaretEqualsToken = 8282, // 0x205A
    /// <summary>Represents <c>%=</c> token.</summary>
    PercentEqualsToken = 8283, // 0x205B
    /// <summary>Represents <c>??=</c> token.</summary>
    QuestionQuestionEqualsToken = 8284, // 0x205C
    /// <summary>Represents <see langword="bool" />.</summary>
    BoolKeyword = 8304, // 0x2070
    /// <summary>Represents <see langword="byte" />.</summary>
    ByteKeyword = 8305, // 0x2071
    /// <summary>Represents <see langword="sbyte" />.</summary>
    SByteKeyword = 8306, // 0x2072
    /// <summary>Represents <see langword="short" />.</summary>
    ShortKeyword = 8307, // 0x2073
    /// <summary>Represents <see langword="ushort" />.</summary>
    UShortKeyword = 8308, // 0x2074
    /// <summary>Represents <see langword="int" />.</summary>
    IntKeyword = 8309, // 0x2075
    /// <summary>Represents <see langword="uint" />.</summary>
    UIntKeyword = 8310, // 0x2076
    /// <summary>Represents <see langword="long" />.</summary>
    LongKeyword = 8311, // 0x2077
    /// <summary>Represents <see langword="ulong" />.</summary>
    ULongKeyword = 8312, // 0x2078
    /// <summary>Represents <see langword="double" />.</summary>
    DoubleKeyword = 8313, // 0x2079
    /// <summary>Represents <see langword="float" />.</summary>
    FloatKeyword = 8314, // 0x207A
    /// <summary>Represents <see langword="decimal" />.</summary>
    DecimalKeyword = 8315, // 0x207B
    /// <summary>Represents <see langword="string" />.</summary>
    StringKeyword = 8316, // 0x207C
    /// <summary>Represents <see langword="char" />.</summary>
    CharKeyword = 8317, // 0x207D
    /// <summary>Represents <see langword="void" />.</summary>
    VoidKeyword = 8318, // 0x207E
    /// <summary>Represents <see langword="object" />.</summary>
    ObjectKeyword = 8319, // 0x207F
    /// <summary>Represents <see langword="typeof" />.</summary>
    TypeOfKeyword = 8320, // 0x2080
    /// <summary>Represents <see langword="sizeof" />.</summary>
    SizeOfKeyword = 8321, // 0x2081
    /// <summary>Represents <see langword="null" />.</summary>
    NullKeyword = 8322, // 0x2082
    /// <summary>Represents <see langword="true" />.</summary>
    TrueKeyword = 8323, // 0x2083
    /// <summary>Represents <see langword="false" />.</summary>
    FalseKeyword = 8324, // 0x2084
    /// <summary>Represents <see langword="if" />.</summary>
    IfKeyword = 8325, // 0x2085
    /// <summary>Represents <see langword="else" />.</summary>
    ElseKeyword = 8326, // 0x2086
    /// <summary>Represents <see langword="while" />.</summary>
    WhileKeyword = 8327, // 0x2087
    /// <summary>Represents <see langword="for" />.</summary>
    ForKeyword = 8328, // 0x2088
    /// <summary>Represents <see langword="foreach" />.</summary>
    ForEachKeyword = 8329, // 0x2089
    /// <summary>Represents <see langword="do" />.</summary>
    DoKeyword = 8330, // 0x208A
    /// <summary>Represents <see langword="switch" />.</summary>
    SwitchKeyword = 8331, // 0x208B
    /// <summary>Represents <see langword="case" />.</summary>
    CaseKeyword = 8332, // 0x208C
    /// <summary>Represents <see langword="default" />.</summary>
    DefaultKeyword = 8333, // 0x208D
    /// <summary>Represents <see langword="try" />.</summary>
    TryKeyword = 8334, // 0x208E
    /// <summary>Represents <see langword="catch" />.</summary>
    CatchKeyword = 8335, // 0x208F
    /// <summary>Represents <see langword="finally" />.</summary>
    FinallyKeyword = 8336, // 0x2090
    /// <summary>Represents <see langword="lock" />.</summary>
    LockKeyword = 8337, // 0x2091
    /// <summary>Represents <see langword="goto" />.</summary>
    GotoKeyword = 8338, // 0x2092
    /// <summary>Represents <see langword="break" />.</summary>
    BreakKeyword = 8339, // 0x2093
    /// <summary>Represents <see langword="continue" />.</summary>
    ContinueKeyword = 8340, // 0x2094
    /// <summary>Represents <see langword="return" />.</summary>
    ReturnKeyword = 8341, // 0x2095
    /// <summary>Represents <see langword="throw" />.</summary>
    ThrowKeyword = 8342, // 0x2096
    /// <summary>Represents <see langword="public" />.</summary>
    PublicKeyword = 8343, // 0x2097
    /// <summary>Represents <see langword="private" />.</summary>
    PrivateKeyword = 8344, // 0x2098
    /// <summary>Represents <see langword="internal" />.</summary>
    InternalKeyword = 8345, // 0x2099
    /// <summary>Represents <see langword="protected" />.</summary>
    ProtectedKeyword = 8346, // 0x209A
    /// <summary>Represents <see langword="static" />.</summary>
    StaticKeyword = 8347, // 0x209B
    /// <summary>Represents <see langword="readonly" />.</summary>
    ReadOnlyKeyword = 8348, // 0x209C
    /// <summary>Represents <see langword="sealed" />.</summary>
    SealedKeyword = 8349, // 0x209D
    /// <summary>Represents <see langword="const" />.</summary>
    ConstKeyword = 8350, // 0x209E
    /// <summary>Represents <see langword="fixed" />.</summary>
    FixedKeyword = 8351, // 0x209F
    /// <summary>Represents <see langword="stackalloc" />.</summary>
    StackAllocKeyword = 8352, // 0x20A0
    /// <summary>Represents <see langword="volatile" />.</summary>
    VolatileKeyword = 8353, // 0x20A1
    /// <summary>Represents <see langword="new" />.</summary>
    NewKeyword = 8354, // 0x20A2
    /// <summary>Represents <see langword="override" />.</summary>
    OverrideKeyword = 8355, // 0x20A3
    /// <summary>Represents <see langword="abstract" />.</summary>
    AbstractKeyword = 8356, // 0x20A4
    /// <summary>Represents <see langword="virtual" />.</summary>
    VirtualKeyword = 8357, // 0x20A5
    /// <summary>Represents <see langword="event" />.</summary>
    EventKeyword = 8358, // 0x20A6
    /// <summary>Represents <see langword="extern" />.</summary>
    ExternKeyword = 8359, // 0x20A7
    /// <summary>Represents <see langword="ref" />.</summary>
    RefKeyword = 8360, // 0x20A8
    /// <summary>Represents <see langword="out" />.</summary>
    OutKeyword = 8361, // 0x20A9
    /// <summary>Represents <see langword="in" />.</summary>
    InKeyword = 8362, // 0x20AA
    /// <summary>Represents <see langword="is" />.</summary>
    IsKeyword = 8363, // 0x20AB
    /// <summary>Represents <see langword="as" />.</summary>
    AsKeyword = 8364, // 0x20AC
    /// <summary>Represents <see langword="params" />.</summary>
    ParamsKeyword = 8365, // 0x20AD
    /// <summary>Represents <see langword="__arglist" />.</summary>
    ArgListKeyword = 8366, // 0x20AE
    /// <summary>Represents <see langword="__makeref" />.</summary>
    MakeRefKeyword = 8367, // 0x20AF
    /// <summary>Represents <see langword="__reftype" />.</summary>
    RefTypeKeyword = 8368, // 0x20B0
    /// <summary>Represents <see langword="__refvalue" />.</summary>
    RefValueKeyword = 8369, // 0x20B1
    /// <summary>Represents <see langword="this" />.</summary>
    ThisKeyword = 8370, // 0x20B2
    /// <summary>Represents <see langword="base" />.</summary>
    BaseKeyword = 8371, // 0x20B3
    /// <summary>Represents <see langword="namespace" />.</summary>
    NamespaceKeyword = 8372, // 0x20B4
    /// <summary>Represents <see langword="using" />.</summary>
    UsingKeyword = 8373, // 0x20B5
    /// <summary>Represents <see langword="class" />.</summary>
    ClassKeyword = 8374, // 0x20B6
    /// <summary>Represents <see langword="struct" />.</summary>
    StructKeyword = 8375, // 0x20B7
    /// <summary>Represents <see langword="interface" />.</summary>
    InterfaceKeyword = 8376, // 0x20B8
    /// <summary>Represents <see langword="enum" />.</summary>
    EnumKeyword = 8377, // 0x20B9
    /// <summary>Represents <see langword="delegate" />.</summary>
    DelegateKeyword = 8378, // 0x20BA
    /// <summary>Represents <see langword="checked" />.</summary>
    CheckedKeyword = 8379, // 0x20BB
    /// <summary>Represents <see langword="unchecked" />.</summary>
    UncheckedKeyword = 8380, // 0x20BC
    /// <summary>Represents <see langword="unsafe" />.</summary>
    UnsafeKeyword = 8381, // 0x20BD
    /// <summary>Represents <see langword="operator" />.</summary>
    OperatorKeyword = 8382, // 0x20BE
    /// <summary>Represents <see langword="explicit" />.</summary>
    ExplicitKeyword = 8383, // 0x20BF
    /// <summary>Represents <see langword="implicit" />.</summary>
    ImplicitKeyword = 8384, // 0x20C0
    /// <summary>Represents <see langword="yield" />.</summary>
    YieldKeyword = 8405, // 0x20D5
    /// <summary>Represents <see langword="partial" />.</summary>
    PartialKeyword = 8406, // 0x20D6
    /// <summary>Represents <see langword="alias" />.</summary>
    AliasKeyword = 8407, // 0x20D7
    /// <summary>Represents <see langword="global" />.</summary>
    GlobalKeyword = 8408, // 0x20D8
    /// <summary>Represents <see langword="assembly" />.</summary>
    AssemblyKeyword = 8409, // 0x20D9
    /// <summary>Represents <see langword="module" />.</summary>
    ModuleKeyword = 8410, // 0x20DA
    /// <summary>Represents <see langword="type" />.</summary>
    TypeKeyword = 8411, // 0x20DB
    /// <summary>Represents <see langword="field" />.</summary>
    FieldKeyword = 8412, // 0x20DC
    /// <summary>Represents <see langword="method" />.</summary>
    MethodKeyword = 8413, // 0x20DD
    /// <summary>Represents <see langword="param" />.</summary>
    ParamKeyword = 8414, // 0x20DE
    /// <summary>Represents <see langword="property" />.</summary>
    PropertyKeyword = 8415, // 0x20DF
    /// <summary>Represents <see langword="typevar" />.</summary>
    TypeVarKeyword = 8416, // 0x20E0
    /// <summary>Represents <see langword="get" />.</summary>
    GetKeyword = 8417, // 0x20E1
    /// <summary>Represents <see langword="set" />.</summary>
    SetKeyword = 8418, // 0x20E2
    /// <summary>Represents <see langword="add" />.</summary>
    AddKeyword = 8419, // 0x20E3
    /// <summary>Represents <see langword="remove" />.</summary>
    RemoveKeyword = 8420, // 0x20E4
    /// <summary>Represents <see langword="where" />.</summary>
    WhereKeyword = 8421, // 0x20E5
    /// <summary>Represents <see langword="from" />.</summary>
    FromKeyword = 8422, // 0x20E6
    /// <summary>Represents <see langword="group" />.</summary>
    GroupKeyword = 8423, // 0x20E7
    /// <summary>Represents <see langword="join" />.</summary>
    JoinKeyword = 8424, // 0x20E8
    /// <summary>Represents <see langword="into" />.</summary>
    IntoKeyword = 8425, // 0x20E9
    /// <summary>Represents <see langword="let" />.</summary>
    LetKeyword = 8426, // 0x20EA
    /// <summary>Represents <see langword="by" />.</summary>
    ByKeyword = 8427, // 0x20EB
    /// <summary>Represents <see langword="select" />.</summary>
    SelectKeyword = 8428, // 0x20EC
    /// <summary>Represents <see langword="orderby" />.</summary>
    OrderByKeyword = 8429, // 0x20ED
    /// <summary>Represents <see langword="on" />.</summary>
    OnKeyword = 8430, // 0x20EE
    /// <summary>Represents <see langword="equals" />.</summary>
    EqualsKeyword = 8431, // 0x20EF
    /// <summary>Represents <see langword="ascending" />.</summary>
    AscendingKeyword = 8432, // 0x20F0
    /// <summary>Represents <see langword="descending" />.</summary>
    DescendingKeyword = 8433, // 0x20F1
    /// <summary>Represents <see langword="nameof" />.</summary>
    NameOfKeyword = 8434, // 0x20F2
    /// <summary>Represents <see langword="async" />.</summary>
    AsyncKeyword = 8435, // 0x20F3
    /// <summary>Represents <see langword="await" />.</summary>
    AwaitKeyword = 8436, // 0x20F4
    /// <summary>Represents <see langword="when" />.</summary>
    WhenKeyword = 8437, // 0x20F5
    /// <summary>Represents <see langword="or" />.</summary>
    OrKeyword = 8438, // 0x20F6
    /// <summary>Represents <see langword="and" />.</summary>
    AndKeyword = 8439, // 0x20F7
    /// <summary>Represents <see langword="not" />.</summary>
    NotKeyword = 8440, // 0x20F8
    /// <summary>Represents <see langword="data" />.</summary>
    DataKeyword = 8441, // 0x20F9
    /// <summary>Represents <see langword="with" />.</summary>
    WithKeyword = 8442, // 0x20FA
    /// <summary>Represents <see langword="init" />.</summary>
    InitKeyword = 8443, // 0x20FB
    /// <summary>Represents <see langword="record" />.</summary>
    RecordKeyword = 8444, // 0x20FC
    /// <summary>Represents <see langword="managed" />.</summary>
    ManagedKeyword = 8445, // 0x20FD
    /// <summary>Represents <see langword="unmanaged" />.</summary>
    UnmanagedKeyword = 8446, // 0x20FE
    /// <summary>Represents <see langword="elif" />.</summary>
    ElifKeyword = 8467, // 0x2113
    /// <summary>Represents <see langword="endif" />.</summary>
    EndIfKeyword = 8468, // 0x2114
    /// <summary>Represents <see langword="region" />.</summary>
    RegionKeyword = 8469, // 0x2115
    /// <summary>Represents <see langword="endregion" />.</summary>
    EndRegionKeyword = 8470, // 0x2116
    /// <summary>Represents <see langword="define" />.</summary>
    DefineKeyword = 8471, // 0x2117
    /// <summary>Represents <see langword="undef" />.</summary>
    UndefKeyword = 8472, // 0x2118
    /// <summary>Represents <see langword="warning" />.</summary>
    WarningKeyword = 8473, // 0x2119
    /// <summary>Represents <see langword="error" />.</summary>
    ErrorKeyword = 8474, // 0x211A
    /// <summary>Represents <see langword="line" />.</summary>
    LineKeyword = 8475, // 0x211B
    /// <summary>Represents <see langword="pragma" />.</summary>
    PragmaKeyword = 8476, // 0x211C
    /// <summary>Represents <see langword="hidden" />.</summary>
    HiddenKeyword = 8477, // 0x211D
    /// <summary>Represents <see langword="checksum" />.</summary>
    ChecksumKeyword = 8478, // 0x211E
    /// <summary>Represents <see langword="disable" />.</summary>
    DisableKeyword = 8479, // 0x211F
    /// <summary>Represents <see langword="restore" />.</summary>
    RestoreKeyword = 8480, // 0x2120
    /// <summary>Represents <see langword="r" />.</summary>
    ReferenceKeyword = 8481, // 0x2121
    /// <summary>Represents <c>$"</c> token.</summary>
    InterpolatedStringStartToken = 8482, // 0x2122
    /// <summary>Represents <c>"</c> token that is closing <c>$"</c>.</summary>
    InterpolatedStringEndToken = 8483, // 0x2123
    /// <summary>Represents <c>$@</c> or <c>@$</c> token.</summary>
    InterpolatedVerbatimStringStartToken = 8484, // 0x2124
    /// <summary>Represents <see langword="load" />.</summary>
    LoadKeyword = 8485, // 0x2125
    /// <summary>Represents <see langword="nullable" />.</summary>
    NullableKeyword = 8486, // 0x2126
    /// <summary>Represents <see langword="enable" />.</summary>
    EnableKeyword = 8487, // 0x2127
    /// <summary>Represents <see langword="warnings" />.</summary>
    WarningsKeyword = 8488, // 0x2128
    /// <summary>Represents <see langword="annotations" />.</summary>
    AnnotationsKeyword = 8489, // 0x2129
    /// <summary>Represents <see langword="var" />.</summary>
    VarKeyword = 8490, // 0x212A
    /// <summary>Represents <c>_</c> token.</summary>
    UnderscoreToken = 8491, // 0x212B
    /// <summary>Represents that nothing was specified as a type argument.</summary>
    /// <remarks>For example <c>Dictionary&lt;,&gt;</c> which has <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.OmittedTypeArgumentToken" /> as a child of <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax" /> before and after the <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.CommaToken" />.</remarks>
    OmittedTypeArgumentToken = 8492, // 0x212C
    /// <summary>Represents that nothing was specified as an array size.</summary>
    /// <remarks>For example <c>int[,]</c> which has <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.OmittedArraySizeExpressionToken" /> as a child of <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax" /> before and after the <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.CommaToken" />.</remarks>
    OmittedArraySizeExpressionToken = 8493, // 0x212D
    /// <summary>Represents a token that comes after the end of a directive such as <c>#endif</c>.</summary>
    EndOfDirectiveToken = 8494, // 0x212E
    /// <summary>Represents the end of a triple-slash documentation comment.</summary>
    EndOfDocumentationCommentToken = 8495, // 0x212F
    /// <summary>Represents the end of a file.</summary>
    EndOfFileToken = 8496, // 0x2130
    BadToken = 8507, // 0x213B
    IdentifierToken = 8508, // 0x213C
    NumericLiteralToken = 8509, // 0x213D
    CharacterLiteralToken = 8510, // 0x213E
    StringLiteralToken = 8511, // 0x213F
    XmlEntityLiteralToken = 8512, // 0x2140
    XmlTextLiteralToken = 8513, // 0x2141
    XmlTextLiteralNewLineToken = 8514, // 0x2142
    InterpolatedStringToken = 8515, // 0x2143
    InterpolatedStringTextToken = 8517, // 0x2145
    EndOfLineTrivia = 8539, // 0x215B
    WhitespaceTrivia = 8540, // 0x215C
    SingleLineCommentTrivia = 8541, // 0x215D
    MultiLineCommentTrivia = 8542, // 0x215E
    DocumentationCommentExteriorTrivia = 8543, // 0x215F
    SingleLineDocumentationCommentTrivia = 8544, // 0x2160
    MultiLineDocumentationCommentTrivia = 8545, // 0x2161
    DisabledTextTrivia = 8546, // 0x2162
    PreprocessingMessageTrivia = 8547, // 0x2163
    IfDirectiveTrivia = 8548, // 0x2164
    ElifDirectiveTrivia = 8549, // 0x2165
    ElseDirectiveTrivia = 8550, // 0x2166
    EndIfDirectiveTrivia = 8551, // 0x2167
    RegionDirectiveTrivia = 8552, // 0x2168
    EndRegionDirectiveTrivia = 8553, // 0x2169
    DefineDirectiveTrivia = 8554, // 0x216A
    UndefDirectiveTrivia = 8555, // 0x216B
    ErrorDirectiveTrivia = 8556, // 0x216C
    WarningDirectiveTrivia = 8557, // 0x216D
    LineDirectiveTrivia = 8558, // 0x216E
    PragmaWarningDirectiveTrivia = 8559, // 0x216F
    PragmaChecksumDirectiveTrivia = 8560, // 0x2170
    ReferenceDirectiveTrivia = 8561, // 0x2171
    BadDirectiveTrivia = 8562, // 0x2172
    SkippedTokensTrivia = 8563, // 0x2173
    ConflictMarkerTrivia = 8564, // 0x2174
    XmlElement = 8574, // 0x217E
    XmlElementStartTag = 8575, // 0x217F
    XmlElementEndTag = 8576, // 0x2180
    XmlEmptyElement = 8577, // 0x2181
    XmlTextAttribute = 8578, // 0x2182
    XmlCrefAttribute = 8579, // 0x2183
    XmlNameAttribute = 8580, // 0x2184
    XmlName = 8581, // 0x2185
    XmlPrefix = 8582, // 0x2186
    XmlText = 8583, // 0x2187
    XmlCDataSection = 8584, // 0x2188
    XmlComment = 8585, // 0x2189
    XmlProcessingInstruction = 8586, // 0x218A
    TypeCref = 8597, // 0x2195
    QualifiedCref = 8598, // 0x2196
    NameMemberCref = 8599, // 0x2197
    IndexerMemberCref = 8600, // 0x2198
    OperatorMemberCref = 8601, // 0x2199
    ConversionOperatorMemberCref = 8602, // 0x219A
    CrefParameterList = 8603, // 0x219B
    CrefBracketedParameterList = 8604, // 0x219C
    CrefParameter = 8605, // 0x219D
    IdentifierName = 8616, // 0x21A8
    QualifiedName = 8617, // 0x21A9
    GenericName = 8618, // 0x21AA
    TypeArgumentList = 8619, // 0x21AB
    AliasQualifiedName = 8620, // 0x21AC
    PredefinedType = 8621, // 0x21AD
    ArrayType = 8622, // 0x21AE
    ArrayRankSpecifier = 8623, // 0x21AF
    PointerType = 8624, // 0x21B0
    NullableType = 8625, // 0x21B1
    OmittedTypeArgument = 8626, // 0x21B2
    ParenthesizedExpression = 8632, // 0x21B8
    ConditionalExpression = 8633, // 0x21B9
    InvocationExpression = 8634, // 0x21BA
    ElementAccessExpression = 8635, // 0x21BB
    ArgumentList = 8636, // 0x21BC
    BracketedArgumentList = 8637, // 0x21BD
    Argument = 8638, // 0x21BE
    NameColon = 8639, // 0x21BF
    CastExpression = 8640, // 0x21C0
    AnonymousMethodExpression = 8641, // 0x21C1
    SimpleLambdaExpression = 8642, // 0x21C2
    ParenthesizedLambdaExpression = 8643, // 0x21C3
    ObjectInitializerExpression = 8644, // 0x21C4
    CollectionInitializerExpression = 8645, // 0x21C5
    ArrayInitializerExpression = 8646, // 0x21C6
    AnonymousObjectMemberDeclarator = 8647, // 0x21C7
    ComplexElementInitializerExpression = 8648, // 0x21C8
    ObjectCreationExpression = 8649, // 0x21C9
    AnonymousObjectCreationExpression = 8650, // 0x21CA
    ArrayCreationExpression = 8651, // 0x21CB
    ImplicitArrayCreationExpression = 8652, // 0x21CC
    StackAllocArrayCreationExpression = 8653, // 0x21CD
    OmittedArraySizeExpression = 8654, // 0x21CE
    InterpolatedStringExpression = 8655, // 0x21CF
    ImplicitElementAccess = 8656, // 0x21D0
    IsPatternExpression = 8657, // 0x21D1
    RangeExpression = 8658, // 0x21D2
    ImplicitObjectCreationExpression = 8659, // 0x21D3
    AddExpression = 8668, // 0x21DC
    SubtractExpression = 8669, // 0x21DD
    MultiplyExpression = 8670, // 0x21DE
    DivideExpression = 8671, // 0x21DF
    ModuloExpression = 8672, // 0x21E0
    LeftShiftExpression = 8673, // 0x21E1
    RightShiftExpression = 8674, // 0x21E2
    LogicalOrExpression = 8675, // 0x21E3
    LogicalAndExpression = 8676, // 0x21E4
    BitwiseOrExpression = 8677, // 0x21E5
    BitwiseAndExpression = 8678, // 0x21E6
    ExclusiveOrExpression = 8679, // 0x21E7
    EqualsExpression = 8680, // 0x21E8
    NotEqualsExpression = 8681, // 0x21E9
    LessThanExpression = 8682, // 0x21EA
    LessThanOrEqualExpression = 8683, // 0x21EB
    GreaterThanExpression = 8684, // 0x21EC
    GreaterThanOrEqualExpression = 8685, // 0x21ED
    IsExpression = 8686, // 0x21EE
    AsExpression = 8687, // 0x21EF
    CoalesceExpression = 8688, // 0x21F0
    SimpleMemberAccessExpression = 8689, // 0x21F1
    PointerMemberAccessExpression = 8690, // 0x21F2
    ConditionalAccessExpression = 8691, // 0x21F3
    MemberBindingExpression = 8707, // 0x2203
    ElementBindingExpression = 8708, // 0x2204
    SimpleAssignmentExpression = 8714, // 0x220A
    AddAssignmentExpression = 8715, // 0x220B
    SubtractAssignmentExpression = 8716, // 0x220C
    MultiplyAssignmentExpression = 8717, // 0x220D
    DivideAssignmentExpression = 8718, // 0x220E
    ModuloAssignmentExpression = 8719, // 0x220F
    AndAssignmentExpression = 8720, // 0x2210
    ExclusiveOrAssignmentExpression = 8721, // 0x2211
    OrAssignmentExpression = 8722, // 0x2212
    LeftShiftAssignmentExpression = 8723, // 0x2213
    RightShiftAssignmentExpression = 8724, // 0x2214
    CoalesceAssignmentExpression = 8725, // 0x2215
    UnaryPlusExpression = 8730, // 0x221A
    UnaryMinusExpression = 8731, // 0x221B
    BitwiseNotExpression = 8732, // 0x221C
    LogicalNotExpression = 8733, // 0x221D
    PreIncrementExpression = 8734, // 0x221E
    PreDecrementExpression = 8735, // 0x221F
    PointerIndirectionExpression = 8736, // 0x2220
    AddressOfExpression = 8737, // 0x2221
    PostIncrementExpression = 8738, // 0x2222
    PostDecrementExpression = 8739, // 0x2223
    AwaitExpression = 8740, // 0x2224
    IndexExpression = 8741, // 0x2225
    ThisExpression = 8746, // 0x222A
    BaseExpression = 8747, // 0x222B
    ArgListExpression = 8748, // 0x222C
    NumericLiteralExpression = 8749, // 0x222D
    StringLiteralExpression = 8750, // 0x222E
    CharacterLiteralExpression = 8751, // 0x222F
    TrueLiteralExpression = 8752, // 0x2230
    FalseLiteralExpression = 8753, // 0x2231
    NullLiteralExpression = 8754, // 0x2232
    DefaultLiteralExpression = 8755, // 0x2233
    TypeOfExpression = 8760, // 0x2238
    SizeOfExpression = 8761, // 0x2239
    CheckedExpression = 8762, // 0x223A
    UncheckedExpression = 8763, // 0x223B
    DefaultExpression = 8764, // 0x223C
    MakeRefExpression = 8765, // 0x223D
    RefValueExpression = 8766, // 0x223E
    RefTypeExpression = 8767, // 0x223F
    QueryExpression = 8774, // 0x2246
    QueryBody = 8775, // 0x2247
    FromClause = 8776, // 0x2248
    LetClause = 8777, // 0x2249
    JoinClause = 8778, // 0x224A
    JoinIntoClause = 8779, // 0x224B
    WhereClause = 8780, // 0x224C
    OrderByClause = 8781, // 0x224D
    AscendingOrdering = 8782, // 0x224E
    DescendingOrdering = 8783, // 0x224F
    SelectClause = 8784, // 0x2250
    GroupClause = 8785, // 0x2251
    QueryContinuation = 8786, // 0x2252
    Block = 8792, // 0x2258
    LocalDeclarationStatement = 8793, // 0x2259
    VariableDeclaration = 8794, // 0x225A
    VariableDeclarator = 8795, // 0x225B
    EqualsValueClause = 8796, // 0x225C
    ExpressionStatement = 8797, // 0x225D
    EmptyStatement = 8798, // 0x225E
    LabeledStatement = 8799, // 0x225F
    GotoStatement = 8800, // 0x2260
    GotoCaseStatement = 8801, // 0x2261
    GotoDefaultStatement = 8802, // 0x2262
    BreakStatement = 8803, // 0x2263
    ContinueStatement = 8804, // 0x2264
    ReturnStatement = 8805, // 0x2265
    YieldReturnStatement = 8806, // 0x2266
    YieldBreakStatement = 8807, // 0x2267
    ThrowStatement = 8808, // 0x2268
    WhileStatement = 8809, // 0x2269
    DoStatement = 8810, // 0x226A
    ForStatement = 8811, // 0x226B
    ForEachStatement = 8812, // 0x226C
    UsingStatement = 8813, // 0x226D
    FixedStatement = 8814, // 0x226E
    CheckedStatement = 8815, // 0x226F
    UncheckedStatement = 8816, // 0x2270
    UnsafeStatement = 8817, // 0x2271
    LockStatement = 8818, // 0x2272
    IfStatement = 8819, // 0x2273
    ElseClause = 8820, // 0x2274
    SwitchStatement = 8821, // 0x2275
    SwitchSection = 8822, // 0x2276
    CaseSwitchLabel = 8823, // 0x2277
    DefaultSwitchLabel = 8824, // 0x2278
    TryStatement = 8825, // 0x2279
    CatchClause = 8826, // 0x227A
    CatchDeclaration = 8827, // 0x227B
    CatchFilterClause = 8828, // 0x227C
    FinallyClause = 8829, // 0x227D
    LocalFunctionStatement = 8830, // 0x227E
    CompilationUnit = 8840, // 0x2288
    GlobalStatement = 8841, // 0x2289
    NamespaceDeclaration = 8842, // 0x228A
    UsingDirective = 8843, // 0x228B
    ExternAliasDirective = 8844, // 0x228C
    AttributeList = 8847, // 0x228F
    AttributeTargetSpecifier = 8848, // 0x2290
    Attribute = 8849, // 0x2291
    AttributeArgumentList = 8850, // 0x2292
    AttributeArgument = 8851, // 0x2293
    NameEquals = 8852, // 0x2294
    ClassDeclaration = 8855, // 0x2297
    StructDeclaration = 8856, // 0x2298
    InterfaceDeclaration = 8857, // 0x2299
    EnumDeclaration = 8858, // 0x229A
    DelegateDeclaration = 8859, // 0x229B
    BaseList = 8864, // 0x22A0
    SimpleBaseType = 8865, // 0x22A1
    TypeParameterConstraintClause = 8866, // 0x22A2
    ConstructorConstraint = 8867, // 0x22A3
    ClassConstraint = 8868, // 0x22A4
    StructConstraint = 8869, // 0x22A5
    TypeConstraint = 8870, // 0x22A6
    ExplicitInterfaceSpecifier = 8871, // 0x22A7
    EnumMemberDeclaration = 8872, // 0x22A8
    FieldDeclaration = 8873, // 0x22A9
    EventFieldDeclaration = 8874, // 0x22AA
    MethodDeclaration = 8875, // 0x22AB
    OperatorDeclaration = 8876, // 0x22AC
    ConversionOperatorDeclaration = 8877, // 0x22AD
    ConstructorDeclaration = 8878, // 0x22AE
    BaseConstructorInitializer = 8889, // 0x22B9
    ThisConstructorInitializer = 8890, // 0x22BA
    DestructorDeclaration = 8891, // 0x22BB
    PropertyDeclaration = 8892, // 0x22BC
    EventDeclaration = 8893, // 0x22BD
    IndexerDeclaration = 8894, // 0x22BE
    AccessorList = 8895, // 0x22BF
    GetAccessorDeclaration = 8896, // 0x22C0
    SetAccessorDeclaration = 8897, // 0x22C1
    AddAccessorDeclaration = 8898, // 0x22C2
    RemoveAccessorDeclaration = 8899, // 0x22C3
    UnknownAccessorDeclaration = 8900, // 0x22C4
    ParameterList = 8906, // 0x22CA
    BracketedParameterList = 8907, // 0x22CB
    Parameter = 8908, // 0x22CC
    TypeParameterList = 8909, // 0x22CD
    TypeParameter = 8910, // 0x22CE
    IncompleteMember = 8916, // 0x22D4
    ArrowExpressionClause = 8917, // 0x22D5
    Interpolation = 8918, // 0x22D6
    InterpolatedStringText = 8919, // 0x22D7
    InterpolationAlignmentClause = 8920, // 0x22D8
    InterpolationFormatClause = 8921, // 0x22D9
    ShebangDirectiveTrivia = 8922, // 0x22DA
    LoadDirectiveTrivia = 8923, // 0x22DB
    TupleType = 8924, // 0x22DC
    TupleElement = 8925, // 0x22DD
    TupleExpression = 8926, // 0x22DE
    SingleVariableDesignation = 8927, // 0x22DF
    ParenthesizedVariableDesignation = 8928, // 0x22E0
    ForEachVariableStatement = 8929, // 0x22E1
    DeclarationPattern = 9000, // 0x2328
    ConstantPattern = 9002, // 0x232A
    CasePatternSwitchLabel = 9009, // 0x2331
    WhenClause = 9013, // 0x2335
    DiscardDesignation = 9014, // 0x2336
    RecursivePattern = 9020, // 0x233C
    PropertyPatternClause = 9021, // 0x233D
    Subpattern = 9022, // 0x233E
    PositionalPatternClause = 9023, // 0x233F
    DiscardPattern = 9024, // 0x2340
    SwitchExpression = 9025, // 0x2341
    SwitchExpressionArm = 9026, // 0x2342
    VarPattern = 9027, // 0x2343
    ParenthesizedPattern = 9028, // 0x2344
    RelationalPattern = 9029, // 0x2345
    TypePattern = 9030, // 0x2346
    OrPattern = 9031, // 0x2347
    AndPattern = 9032, // 0x2348
    NotPattern = 9033, // 0x2349
    DeclarationExpression = 9040, // 0x2350
    RefExpression = 9050, // 0x235A
    RefType = 9051, // 0x235B
    ThrowExpression = 9052, // 0x235C
    ImplicitStackAllocArrayCreationExpression = 9053, // 0x235D
    SuppressNullableWarningExpression = 9054, // 0x235E
    NullableDirectiveTrivia = 9055, // 0x235F
    FunctionPointerType = 9056, // 0x2360
    FunctionPointerParameter = 9057, // 0x2361
    FunctionPointerParameterList = 9058, // 0x2362
    FunctionPointerCallingConvention = 9059, // 0x2363
    InitAccessorDeclaration = 9060, // 0x2364
    WithExpression = 9061, // 0x2365
    WithInitializerExpression = 9062, // 0x2366
    RecordDeclaration = 9063, // 0x2367
    DefaultConstraint = 9064, // 0x2368
    PrimaryConstructorBaseType = 9065, // 0x2369
    FunctionPointerUnmanagedCallingConventionList = 9066, // 0x236A
    FunctionPointerUnmanagedCallingConvention = 9067, // 0x236B
  }
}
